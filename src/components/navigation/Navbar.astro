---
import { navigation, portfolioData } from "@/data/portfolio";
import { lightThemes, darkThemes, specialThemes, allThemes } from "@/lib/theme-manager";
import { generateSocialLinksWithMetadata, getSocialIcon } from "@/lib/social-links";

const currentPath = Astro.url.pathname;

const isActive = (href: string) => {
  if (href === "/") return currentPath === href;
  return currentPath.startsWith(href);
};

// Generate social links with metadata
const socialLinks = generateSocialLinksWithMetadata(portfolioData.personal);
const navSocialLinks = socialLinks.filter(link => ['github', 'linkedin'].includes(link.platform));
---

<div
  class="navbar bg-base-100 fixed top-0 z-50 shadow-sm border-b border-base-content/10 h-20 min-h-20 items-center w-full max-w-full px-2 sm:px-4"
>
  <div class="navbar-start items-center">
    <!-- Mobile menu -->
    <div class="dropdown">
      <div
        tabindex="0"
        role="button"
        class="btn btn-ghost lg:hidden h-12"
        aria-label="Open navigation menu"
        aria-expanded="false"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h8m-8 6h16"></path>
        </svg>
      </div>
      <ul
        tabindex="0"
        class="menu menu-xl dropdown-content bg-base-100 rounded-box z-[1] mt-3 w-52 p-2 shadow"
        role="menu"
        aria-label="Navigation menu"
      >
        {navigation.map((item) => (
          <li>
            <a
              href={item.href}
              class={
                isActive(item.href)
                  ? "active text-primary font-semibold"
                  : "text-base-content"
              }
              role="menuitem"
              aria-current={isActive(item.href) ? "page" : undefined}
            >
              {item.name}
            </a>
          </li>
        ))}
      </ul>
    </div>
    
    <!-- Logo -->
    <a
      href="/"
      class="btn btn-ghost text-2xl font-bold text-primary hover:text-primary-focus h-16 flex items-center"
      aria-label="Home"
    >
      <span class="text-primary">N</span><span class="text-secondary">S</span>
    </a>
  </div>

  <!-- Desktop menu -->
  <div class="navbar-center hidden lg:flex items-center">
    <ul class="menu menu-horizontal px-1 text-lg items-center">
      {navigation.map((item) => (
        <li>
          <a
            href={item.href}
            class={
              isActive(item.href)
                ? "active text-primary font-semibold bg-primary/10 h-12 px-4 flex items-center"
                : "text-base-content hover:text-primary hover:bg-primary/5 h-12 px-4 flex items-center"
            }
            aria-current={isActive(item.href) ? "page" : undefined}
          >
            {item.name}
          </a>
        </li>
      ))}
    </ul>
  </div>

  <div class="navbar-end items-center">
    <!-- Theme switcher -->
    <div class="dropdown dropdown-end ">
      <div
        tabindex="0"
        role="button"
        class="btn btn-ghost text-base-content hover:text-primary hover:bg-primary/10 h-12 flex items-center"
        aria-label="Change theme - Current theme will be displayed"
        aria-haspopup="true"
        aria-expanded="false"
      >
        <svg
          class="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01"
          ></path>
        </svg>
        <span class="hidden md:inline ml-1">Theme</span>
      </div>
      <ul
        tabindex="0"
        class="dropdown-content menu bg-base-100 rounded-box z-[1] w-72 p-2 shadow-lg border border-base-content/10 max-h-170 overflow-y-auto"
        role="menu"
        aria-label="Theme selection menu"
      >
        <!-- Light Themes Section -->
        <li class="menu-title">
          <span class="text-xs font-semibold text-base-content/60 uppercase tracking-wider">‚òÄÔ∏è Light Themes</span>
        </li>
        {
          lightThemes.map((theme) => (
            <li>
              <button
                class="btn btn-sm btn-ghost justify-start w-full text-base-content hover:text-primary hover:bg-primary/10"
                data-theme-switcher={theme.name}
                aria-label={`Switch to ${theme.label} theme`}
                role="menuitem"
              >
                <span class="text-lg">{theme.emoji}</span>
                <span>{theme.label}</span>
              </button>
            </li>
          ))
        }
        
        <!-- Divider -->
        <li><div class="divider my-1"></div></li>
        
        <!-- Dark Themes Section -->
        <li class="menu-title">
          <span class="text-xs font-semibold text-base-content/60 uppercase tracking-wider">üåô Dark Themes</span>
        </li>
        {
          darkThemes.map((theme) => (
            <li>
              <button
                class="btn btn-sm btn-ghost justify-start w-full text-base-content hover:text-primary hover:bg-primary/10"
                data-theme-switcher={theme.name}
                aria-label={`Switch to ${theme.label} theme`}
                role="menuitem"
              >
                <span class="text-lg">{theme.emoji}</span>
                <span>{theme.label}</span>
              </button>
            </li>
          ))
        }
        
        <!-- Divider -->
        <li><div class="divider my-1"></div></li>
        
        <!-- Special Themes Section -->
        <li class="menu-title">
          <span class="text-xs font-semibold text-base-content/60 uppercase tracking-wider">üé® Special</span>
        </li>
        {
          specialThemes.map((theme) => (
            <li>
              <button
                class="btn btn-sm btn-ghost justify-start w-full text-base-content hover:text-primary hover:bg-primary/10"
                data-theme-switcher={theme.name}
                aria-label={`Switch to ${theme.label} theme`}
                role="menuitem"
              >
                <span class="text-lg">{theme.emoji}</span>
                <span>{theme.label}</span>
              </button>
            </li>
          ))
        }
      </ul>
    </div>

    <!-- Social links -->
    {navSocialLinks.map((link, index) => (
      <a
        href={link.url}
        target={link.external ? "_blank" : undefined}
        rel={link.external ? "noopener noreferrer" : undefined}
        class={`btn btn-ghost btn-circle btn-sm text-base-content hover:text-primary hover:bg-primary/10 ${index > 0 ? 'hidden sm:flex' : ''}`}
        aria-label={link.ariaLabel}
      >
        <Fragment set:html={getSocialIcon(link.platform)} />
      </a>
    ))}
  </div>
</div>

<script>
  import { ThemeManager } from "@/lib/theme-manager";

  // Initialize theme management on page load
  document.addEventListener("DOMContentLoaded", () => {
    const themeSwitchers = document.querySelectorAll("[data-theme-switcher]");

    // Initialize theme
    ThemeManager.initializeTheme();
    const currentTheme = ThemeManager.getCurrentTheme();
    
    // Add visual indicator for current theme
    const updateCurrentThemeIndicator = (currentTheme) => {
      // Remove existing indicators
      document.querySelectorAll('[data-theme-switcher]').forEach(btn => {
        btn.classList.remove('bg-primary/20', 'text-primary', 'border-primary/30');
      });
      
      // Add indicator to current theme
      const currentBtn = document.querySelector(`[data-theme-switcher="${currentTheme}"]`);
      if (currentBtn) {
        currentBtn.classList.add('bg-primary/20', 'text-primary', 'border-primary/30');
      }
    };

    // Initial setup
    updateCurrentThemeIndicator(currentTheme);

    // Handle theme switching
    themeSwitchers.forEach((switcher) => {
      switcher.addEventListener("click", () => {
        const theme = switcher.getAttribute("data-theme-switcher");
        if (theme && ThemeManager.isValidTheme(theme)) {
          ThemeManager.setTheme(theme);
          
          // Update visual indicator
          updateCurrentThemeIndicator(theme);

          // Show theme change notification
          const themeInfo = ThemeManager.getThemeInfo(theme);
          if (themeInfo) {
            const themeIndicator = document.createElement("div");
            themeIndicator.className =
              "fixed top-4 right-4 z-50 alert alert-success shadow-lg max-w-xs";
            themeIndicator.innerHTML = `
              <span class="text-xl">${themeInfo.emoji}</span>
              <span>Theme: ${themeInfo.label}</span>
            `;
            document.body.appendChild(themeIndicator);

            // Remove notification after 3 seconds
            setTimeout(() => {
              if (themeIndicator.parentNode) {
                themeIndicator.parentNode.removeChild(themeIndicator);
              }
            }, 3000);
          }
        }
      });
    });

    // Listen for theme changes from other components (like React ModeToggle)
    window.addEventListener("theme-changed", (event) => {
      updateCurrentThemeIndicator(event.detail.theme);
    });
  });
</script>
