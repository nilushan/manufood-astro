---
import { portfolioData as portfolioContent } from "@/data/portfolio";

const currentPath = Astro.url.pathname;

const navItems = [
  { href: "/", label: "Home" },
  { href: "/about", label: "About" },
  { href: "/experience", label: "Experience" },
  { href: "/projects", label: "Projects" },
  { href: "/skills", label: "Skills" },
  { href: "/contact", label: "Contact" },
];

const isActive = (href: string) => {
  if (href === "/") return currentPath === href;
  return currentPath.startsWith(href);
};

// DaisyUI themes organized by light/dark with emojis and descriptions
const lightThemes = [
  { name: "light", emoji: "☀️", label: "Light" },
  { name: "cupcake", emoji: "🧁", label: "Cupcake" },
  { name: "bumblebee", emoji: "🐝", label: "Bumblebee" },
  { name: "emerald", emoji: "💎", label: "Emerald" },
  { name: "corporate", emoji: "🏢", label: "Corporate" },
  { name: "valentine", emoji: "💝", label: "Valentine" },
  { name: "garden", emoji: "🌻", label: "Garden" },
  { name: "aqua", emoji: "🌊", label: "Aqua" },
  { name: "lofi", emoji: "🎵", label: "Lo-Fi" },
  { name: "pastel", emoji: "🎨", label: "Pastel" },
  { name: "fantasy", emoji: "🧚", label: "Fantasy" },
  { name: "wireframe", emoji: "📐", label: "Wireframe" },
  { name: "lemonade", emoji: "🍋", label: "Lemonade" },
  { name: "winter", emoji: "❄️", label: "Winter" },
  { name: "nord", emoji: "🏔️", label: "Nord" },
  { name: "sunset", emoji: "🌅", label: "Sunset" },
  { name: "caramellatte", emoji: "🍮", label: "Caramel Latte" },
  { name: "silk", emoji: "🪞", label: "Silk" }
];

const darkThemes = [
  { name: "dark", emoji: "🌙", label: "Dark" },
  { name: "synthwave", emoji: "🌆", label: "Synthwave" },
  { name: "retro", emoji: "📻", label: "Retro" },
  { name: "cyberpunk", emoji: "🤖", label: "Cyberpunk" },
  { name: "halloween", emoji: "🎃", label: "Halloween" },
  { name: "forest", emoji: "🌲", label: "Forest" },
  { name: "luxury", emoji: "💰", label: "Luxury" },
  { name: "dracula", emoji: "🧛", label: "Dracula" },
  { name: "black", emoji: "⚫", label: "Black" },
  { name: "autumn", emoji: "🍂", label: "Autumn" },
  { name: "business", emoji: "💼", label: "Business" },
  { name: "acid", emoji: "🧪", label: "Acid" },
  { name: "night", emoji: "🌃", label: "Night" },
  { name: "coffee", emoji: "☕", label: "Coffee" },
  { name: "dim", emoji: "🔅", label: "Dim" },
  { name: "abyss", emoji: "🕳️", label: "Abyss" }
];

const specialThemes = [
  { name: "cmyk", emoji: "🖨️", label: "CMYK" }
];

// Combine all themes for reference
const allThemes = [...lightThemes, ...darkThemes, ...specialThemes];
---

<div
  class="navbar bg-base-100 sticky top-0 z-50 shadow-sm border-b border-base-content/10"
>
  <div class="navbar-start">
    <!-- Mobile menu -->
    <div class="dropdown">
      <div
        tabindex="0"
        role="button"
        class="btn btn-ghost lg:hidden"
        aria-label="Open menu"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h8m-8 6h16"></path>
        </svg>
      </div>
      <ul
        tabindex="0"
        class="menu menu-sm dropdown-content bg-base-100 rounded-box z-[1] mt-3 w-52 p-2 shadow"
      >
        {
          navItems.map((item) => (
            <li>
              <a
                href={item.href}
                class={
                  isActive(item.href)
                    ? "active text-primary font-semibold"
                    : "text-base-content"
                }
              >
                {item.label}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
    
    <!-- Logo -->
    <a
      href="/"
      class="btn btn-ghost text-xl font-bold text-primary hover:text-primary-focus"
      aria-label="Home"
    >
      <span class="text-primary">N</span><span class="text-secondary">S</span>
    </a>
  </div>

  <!-- Desktop menu -->
  <div class="navbar-center hidden lg:flex">
    <ul class="menu menu-horizontal px-1">
      {
        navItems.map((item) => (
          <li>
            <a
              href={item.href}
              class={
                isActive(item.href)
                  ? "active text-primary font-semibold bg-primary/10"
                  : "text-base-content hover:text-primary hover:bg-primary/5"
              }
            >
              {item.label}
            </a>
          </li>
        ))
      }
    </ul>
  </div>

  <div class="navbar-end">
    <!-- Theme switcher -->
    <div class="dropdown dropdown-end">
      <div
        tabindex="0"
        role="button"
        class="btn btn-ghost btn-sm"
        aria-label="Change theme"
      >
        <svg
          class="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01"
          ></path>
        </svg>
        <span class="hidden sm:inline ml-1">Theme</span>
      </div>
      <ul
        tabindex="0"
        class="dropdown-content menu bg-base-100 rounded-box z-[1] w-72 p-2 shadow-lg border border-base-content/10 max-h-170 overflow-y-auto"
      >
        <!-- Light Themes Section -->
        <li class="menu-title">
          <span class="text-xs font-semibold text-base-content/60 uppercase tracking-wider">☀️ Light Themes</span>
        </li>
        {
          lightThemes.map((theme) => (
            <li>
              <button
                class="btn btn-sm btn-ghost justify-start w-full text-base-content hover:text-primary hover:bg-primary/10"
                data-theme-switcher={theme.name}
              >
                <span class="text-lg">{theme.emoji}</span>
                <span>{theme.label}</span>
              </button>
            </li>
          ))
        }
        
        <!-- Divider -->
        <li><div class="divider my-1"></div></li>
        
        <!-- Dark Themes Section -->
        <li class="menu-title">
          <span class="text-xs font-semibold text-base-content/60 uppercase tracking-wider">🌙 Dark Themes</span>
        </li>
        {
          darkThemes.map((theme) => (
            <li>
              <button
                class="btn btn-sm btn-ghost justify-start w-full text-base-content hover:text-primary hover:bg-primary/10"
                data-theme-switcher={theme.name}
              >
                <span class="text-lg">{theme.emoji}</span>
                <span>{theme.label}</span>
              </button>
            </li>
          ))
        }
        
        <!-- Divider -->
        <li><div class="divider my-1"></div></li>
        
        <!-- Special Themes Section -->
        <li class="menu-title">
          <span class="text-xs font-semibold text-base-content/60 uppercase tracking-wider">🎨 Special</span>
        </li>
        {
          specialThemes.map((theme) => (
            <li>
              <button
                class="btn btn-sm btn-ghost justify-start w-full text-base-content hover:text-primary hover:bg-primary/10"
                data-theme-switcher={theme.name}
              >
                <span class="text-lg">{theme.emoji}</span>
                <span>{theme.label}</span>
              </button>
            </li>
          ))
        }
      </ul>
    </div>

    <!-- Social links -->
    <a
      href={`https://github.com/${portfolioContent.personal.social.github}`}
      target="_blank"
      rel="noopener noreferrer"
      class="btn btn-ghost btn-circle btn-sm text-base-content hover:text-primary hover:bg-primary/10"
      aria-label="GitHub Profile"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-5 w-5"
        fill="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"
        ></path>
      </svg>
    </a>
    <a
      href={`https://linkedin.com/in/${portfolioContent.personal.social.linkedin}`}
      target="_blank"
      rel="noopener noreferrer"
      class="btn btn-ghost btn-circle btn-sm text-base-content hover:text-primary hover:bg-primary/10"
      aria-label="LinkedIn Profile"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-5 w-5"
        fill="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"
        ></path>
      </svg>
    </a>
  </div>
</div>

<script>
  // DaisyUI Theme Switcher with Font Support
  document.addEventListener("DOMContentLoaded", () => {
    const html = document.documentElement;
    const themeSwitchers = document.querySelectorAll("[data-theme-switcher]");

    // Load saved theme or default to light
    const savedTheme = localStorage.getItem("theme") || "light";
    html.setAttribute("data-theme", savedTheme);
    
    // Add visual indicator for current theme
    const updateCurrentThemeIndicator = (currentTheme) => {
      // Remove existing indicators
      document.querySelectorAll('[data-theme-switcher]').forEach(btn => {
        btn.classList.remove('bg-primary/20', 'text-primary', 'border-primary/30');
      });
      
      // Add indicator to current theme
      const currentBtn = document.querySelector(`[data-theme-switcher="${currentTheme}"]`);
      if (currentBtn) {
        currentBtn.classList.add('bg-primary/20', 'text-primary', 'border-primary/30');
      }
    };

    // Log current theme fonts for demonstration
    function logThemeFonts(theme: string) {
      console.log(`🎨 Theme: ${theme}`);
      const styles = getComputedStyle(document.documentElement);
      const headingFont = styles.getPropertyValue("--font-heading").trim();
      const bodyFont = styles.getPropertyValue("--font-body").trim();

      if (headingFont) {
        console.log("📝 Heading font:", headingFont);
      }
      if (bodyFont) {
        console.log("📄 Body font:", bodyFont);
      }

      // Show visual feedback in the console
      console.log(
        "%cFonts switched automatically with DaisyUI! 🚀",
        "color: #2563eb; font-weight: bold;",
      );
    }

    // Initial setup
    setTimeout(() => {
      logThemeFonts(savedTheme);
      updateCurrentThemeIndicator(savedTheme);
    }, 100);

    themeSwitchers.forEach((switcher) => {
      switcher.addEventListener("click", () => {
        const theme = switcher.getAttribute("data-theme-switcher");
        if (theme) {
          html.setAttribute("data-theme", theme);
          localStorage.setItem("theme", theme);
          
          // Update visual indicator
          updateCurrentThemeIndicator(theme);

          // Log font changes (for demonstration)
          setTimeout(() => logThemeFonts(theme), 50);

          // Optional: Dispatch custom event for font change
          window.dispatchEvent(
            new CustomEvent("themechange", {
              detail: { theme, timestamp: Date.now() },
            }),
          );

          // Add visual feedback for theme change with theme name
          const themeLabel = allThemes.find(t => t.name === theme)?.label || theme;
          const themeEmoji = allThemes.find(t => t.name === theme)?.emoji || "🎨";
          
          const themeIndicator = document.createElement("div");
          themeIndicator.className =
            "fixed top-4 right-4 z-50 alert alert-success shadow-lg max-w-xs";
          themeIndicator.innerHTML = `
            <span class="text-xl">${themeEmoji}</span>
            <span>Theme: ${themeLabel}</span>
          `;
          document.body.appendChild(themeIndicator);

          // Remove notification after 3 seconds
          setTimeout(() => {
            if (themeIndicator.parentNode) {
              themeIndicator.parentNode.removeChild(themeIndicator);
            }
          }, 3000);
        }
      });
    });

    // Theme lists for reference in script (matching the ones defined above)
    const lightThemes = [
      { name: "light", emoji: "☀️", label: "Light" },
      { name: "cupcake", emoji: "🧁", label: "Cupcake" },
      { name: "bumblebee", emoji: "🐝", label: "Bumblebee" },
      { name: "emerald", emoji: "💎", label: "Emerald" },
      { name: "corporate", emoji: "🏢", label: "Corporate" },
      { name: "valentine", emoji: "💝", label: "Valentine" },
      { name: "garden", emoji: "🌻", label: "Garden" },
      { name: "aqua", emoji: "🌊", label: "Aqua" },
      { name: "lofi", emoji: "🎵", label: "Lo-Fi" },
      { name: "pastel", emoji: "🎨", label: "Pastel" },
      { name: "fantasy", emoji: "🧚", label: "Fantasy" },
      { name: "wireframe", emoji: "📐", label: "Wireframe" },
      { name: "lemonade", emoji: "🍋", label: "Lemonade" },
      { name: "winter", emoji: "❄️", label: "Winter" },
      { name: "nord", emoji: "🏔️", label: "Nord" },
      { name: "sunset", emoji: "🌅", label: "Sunset" },
      { name: "caramellatte", emoji: "🍮", label: "Caramel Latte" },
      { name: "silk", emoji: "🪞", label: "Silk" }
    ];
    
    const darkThemes = [
      { name: "dark", emoji: "🌙", label: "Dark" },
      { name: "synthwave", emoji: "🌆", label: "Synthwave" },
      { name: "retro", emoji: "📻", label: "Retro" },
      { name: "cyberpunk", emoji: "🤖", label: "Cyberpunk" },
      { name: "halloween", emoji: "🎃", label: "Halloween" },
      { name: "forest", emoji: "🌲", label: "Forest" },
      { name: "luxury", emoji: "💰", label: "Luxury" },
      { name: "dracula", emoji: "🧛", label: "Dracula" },
      { name: "black", emoji: "⚫", label: "Black" },
      { name: "autumn", emoji: "🍂", label: "Autumn" },
      { name: "business", emoji: "💼", label: "Business" },
      { name: "acid", emoji: "🧪", label: "Acid" },
      { name: "night", emoji: "🌃", label: "Night" },
      { name: "coffee", emoji: "☕", label: "Coffee" },
      { name: "dim", emoji: "🔅", label: "Dim" },
      { name: "abyss", emoji: "🕳️", label: "Abyss" }
    ];
    
    const specialThemes = [
      { name: "cmyk", emoji: "🖨️", label: "CMYK" }
    ];
    
    const allThemes = [...lightThemes, ...darkThemes, ...specialThemes];

    // Example: Listen for theme changes
    window.addEventListener("themechange", (event) => {
      console.log("🎭 Theme changed to:", event.detail.theme);
      // Fonts change automatically via CSS custom properties!
      // No additional JavaScript needed for font switching
    });
  });
</script>
